"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSocket = void 0;
const debug_1 = __importDefault(require("debug"));
const body_parser_1 = __importDefault(require("body-parser"));
const express_1 = __importDefault(require("express"));
const HTTP = __importStar(require("http"));
const socket_io_1 = require("socket.io");
const config_1 = __importDefault(require("./config"));
const routes_1 = __importDefault(require("./routes"));
const log = (0, debug_1.default)('sockethub:services:http');
/**
 * Handles the initialization and access of service objects.
 *
 *  - HTTP Server
 *  - Express (service resources and example routes)
 *  - Socket.io (bidirectional websocket communication)
 */
class Serve {
    /**
     * Starts the services needed for sockethub to operate. After this command completes,
     * the `http` and `io` class properties will be set.
     */
    start() {
        // initialize express and socket.io objects
        const app = Serve.initExpress();
        this.http = new HTTP.Server(app);
        this.io = new socket_io_1.Server(this.http, {
            path: config_1.default.get('service:path'),
            cors: {
                origin: "*",
                methods: ["GET", "POST"]
            }
        });
        routes_1.default.setup(app);
        this.startListener();
    }
    startListener() {
        this.http.listen(config_1.default.get('service:port'), config_1.default.get('service:host'), () => {
            log(`sockethub listening on ` +
                `http://${config_1.default.get('service:host')}:${config_1.default.get('service:port')}`);
        });
    }
    ;
    static initExpress() {
        let app = (0, express_1.default)();
        // templating engines
        app.set('view engine', 'ejs');
        // use bodyParser
        app.use(body_parser_1.default.urlencoded({ extended: true }));
        app.use(body_parser_1.default.json());
        return app;
    }
}
const serve = new Serve();
function getSocket(sessionId) {
    return __awaiter(this, void 0, void 0, function* () {
        const sockets = yield serve.io.fetchSockets();
        return new Promise((resolve, reject) => {
            for (let socket of sockets) {
                if (sessionId === socket.id) {
                    return resolve(socket);
                }
            }
            return reject(`unable to find socket for sessionId ${sessionId}`);
        });
    });
}
exports.getSocket = getSocket;
exports.default = serve;
//# sourceMappingURL=/serve.js.map