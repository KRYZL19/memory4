"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const init_1 = __importDefault(require("./bootstrap/init"));
const platform_instance_1 = __importStar(require("./platform-instance"));
const common_1 = require("./common");
class ProcessManager {
    constructor(parentId, parentSecret1, parentSecret2) {
        this.parentId = parentId;
        this.parentSecret1 = parentSecret1;
        this.parentSecret2 = parentSecret2;
    }
    get(platform, actorId, sessionId) {
        const platformDetails = init_1.default.platforms.get(platform);
        if (platformDetails.config.persist) {
            // ensure process is started - one for each actor
            return this.ensureProcess(platform, sessionId, actorId);
        }
        else {
            // ensure process is started - one for all jobs
            return this.ensureProcess(platform);
        }
    }
    createPlatformInstance(identifier, platform, actor) {
        const secrets = [
            'secrets', {
                parentSecret1: this.parentSecret1,
                parentSecret2: this.parentSecret2
            }
        ];
        const platformInstanceConfig = {
            identifier: identifier,
            platform: platform,
            parentId: this.parentId,
            actor: actor
        };
        const platformInstance = new platform_instance_1.default(platformInstanceConfig);
        platformInstance.initQueue(this.parentSecret1 + this.parentSecret2);
        platformInstance.process.send(secrets);
        return platformInstance;
    }
    ensureProcess(platform, sessionId, actor) {
        const identifier = (0, common_1.getPlatformId)(platform, actor);
        const platformInstance = platform_instance_1.platformInstances.get(identifier) ||
            this.createPlatformInstance(identifier, platform, actor);
        if (sessionId) {
            platformInstance.registerSession(sessionId);
        }
        platform_instance_1.platformInstances.set(identifier, platformInstance);
        return platformInstance;
    }
}
exports.default = ProcessManager;
//# sourceMappingURL=/process-manager.js.map