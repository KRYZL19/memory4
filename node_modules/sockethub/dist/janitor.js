"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const platform_instance_1 = require("./platform-instance");
const serve_1 = __importDefault(require("./serve"));
const rmLog = (0, debug_1.default)('sockethub:janitor');
const TICK = 15000;
let alreadyCalled = false;
let cycleCount = 0; // a counter for each setInterval call
let reportCount = 0; // number of times a report is printed
/**
 * Every TICK the Janitor will compare existing platform instances with socket.ids (aka. sessionId)
 * If all of the sessionIds associated with a platformInstance have no corresponding socket.id
 * (from the http.io socket.io instance), then the platformInstance will first be flagged, if after
 * the next TICK the same state is determined, the platform will be destroyed (this allows for page
 * refreshes not destroying platform instances)
 */
function janitorCycle() {
    if (!alreadyCalled) {
        alreadyCalled = true;
    }
    else {
        return;
    }
    rmLog('initializing resource manager');
    setInterval(() => __awaiter(this, void 0, void 0, function* () {
        cycleCount++;
        const sockets = yield serve_1.default.io.fetchSockets();
        if (!(cycleCount % 4)) {
            reportCount++;
            rmLog(`sessions: ${sockets.length} instances: ${platform_instance_1.platformInstances.size}`);
        }
        for (let platformInstance of platform_instance_1.platformInstances.values()) {
            removeStaleSessions(platformInstance, sockets);
            // Static platforms are for global use, not tied to a unique to session / eg. credentials)
            if ((!platformInstance.global) && (platformInstance.sessions.size === 0)) {
                removeStalePlatformInstance(platformInstance);
            }
            else {
                platformInstance.flaggedForTermination = false;
            }
        }
    }), TICK);
}
function socketExists(sessionId, sockets) {
    for (let socket of sockets) {
        if (socket.id === sessionId) {
            return true;
        }
    }
    return false;
}
function removeStaleSessions(platformInstance, sockets) {
    for (let sessionId of platformInstance.sessions.values()) {
        if (!socketExists(sessionId, sockets)) {
            rmLog('removing stale session reference ' + sessionId + ' in platform instance '
                + platformInstance.id);
            platformInstance.sessions.delete(sessionId);
        }
    }
}
function removeStalePlatformInstance(platformInstance) {
    if (platformInstance.flaggedForTermination) {
        rmLog(`terminating platform instance ${platformInstance.id}`);
        platformInstance.destroy(); // terminate
    }
    else {
        rmLog(`flagging for termination platform instance ${platformInstance.id} ` +
            `(no registered sessions found)`);
        platformInstance.flaggedForTermination = true;
    }
}
const janitor = {
    clean: janitorCycle,
    alreadyCalled: alreadyCalled,
    cycleCount: cycleCount,
    reportCount: reportCount
};
exports.default = janitor;
//# sourceMappingURL=/janitor.js.map