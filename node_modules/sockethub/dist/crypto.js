"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const ALGORITHM = 'aes-256-cbc', IV_LENGTH = 16; // For AES, this is always 16
class Crypto {
    constructor() { }
    encrypt(json, secret) {
        const iv = (0, crypto_1.randomBytes)(IV_LENGTH);
        const cipher = (0, crypto_1.createCipheriv)(ALGORITHM, Buffer.from(secret), iv);
        let encrypted = cipher.update(JSON.stringify(json));
        encrypted = Buffer.concat([encrypted, cipher.final()]);
        return iv.toString('hex') + ':' + encrypted.toString('hex');
    }
    decrypt(text, secret) {
        let parts = text.split(':');
        const iv = Buffer.from(parts.shift(), 'hex');
        const encryptedText = Buffer.from(parts.join(':'), 'hex');
        const decipher = (0, crypto_1.createDecipheriv)(ALGORITHM, Buffer.from(secret), iv);
        let decrypted = decipher.update(encryptedText);
        decrypted = Buffer.concat([decrypted, decipher.final()]);
        return JSON.parse(decrypted.toString());
    }
    hash(text) {
        const shasum = (0, crypto_1.createHash)('sha1');
        shasum.update(text);
        return shasum.digest('hex').substring(0, 7);
    }
    randToken(len) {
        if (len > 32) {
            throw new Error(`crypto.randToken supports a length param of up to 32, ${len} given`);
        }
        const buf = (0, crypto_1.randomBytes)(len);
        return buf.toString('hex').substring(0, len);
    }
}
const crypto = new Crypto();
exports.default = crypto;
//# sourceMappingURL=/crypto.js.map