"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
const nconf_1 = __importDefault(require("nconf"));
const debug_1 = require("debug");
const log = (0, debug_1.debug)('sockethub:bootstrap:config');
class Config {
    constructor() {
        this.get = (key) => nconf_1.default.get(key);
        log('initializing config');
        // assign config loading priorities (command-line, environment, cfg, defaults)
        nconf_1.default.argv({
            'port': {
                alias: 'service.port'
            },
            'host': {
                alias: 'service.host'
            },
            'redis_host': {
                alias: 'redis.host'
            },
            'redis_port': {
                alias: 'redis.port'
            },
            'redis_url': {
                alias: 'redis.url'
            }
        });
        nconf_1.default.env();
        // get value of flags defined by any command-line params
        const examples = nconf_1.default.get('examples');
        // Load the main config
        nconf_1.default.file(__dirname + '/../config.json');
        // only override config file if explicitly mentioned in command-line params
        nconf_1.default.set('examples:enabled', (examples ? true : nconf_1.default.get('examples:enabled')));
        // load defaults
        const defaults = require(__dirname + '/defaults.json');
        nconf_1.default.defaults(defaults);
        nconf_1.default.required(['platforms:whitelist', 'platforms:blacklist']);
        function defaultEnvParams(host, port, prop) {
            nconf_1.default.set(prop + ':host', host);
            nconf_1.default.set(prop + ':port', port);
        }
        defaultEnvParams(process.env.HOST || nconf_1.default.get('service:host'), process.env.PORT || nconf_1.default.get('service:port'), 'service');
        defaultEnvParams(process.env.REDIS_HOST || nconf_1.default.get('redis:host'), process.env.REDIS_PORT || nconf_1.default.get('redis:port'), 'redis');
        // allow a redis://user:host:port url, takes precedence
        if (process.env.REDIS_URL) {
            nconf_1.default.set('redis:url', process.env.REDIS_URL);
            nconf_1.default.clear('redis:host');
            nconf_1.default.clear('redis:port');
        }
    }
}
exports.Config = Config;
const config = new Config();
exports.default = config;
//# sourceMappingURL=/config.js.map